- timezone = (Time.zone.utc_offset + TZInfo::Timezone.get(Time.zone.tzinfo.name).current_period.std_offset) / 60
- if auction.tournament?
  - attempt ||= auction.auction_attempts.where(user: current_user).last
- user_subscribed = auction.auction_attempts.where(user: current_user).where('"auction_attempts"."credits" > 0').exists?

/ box de vencedor
- content_for :winner_box, flush: true
  .box-notify.-box-notify-success
    .box-info.-box-info-notify.-big
      i.fa.fa-trophy
      .box-notify-text.-winner Venceu
    .box-marketValue.u-textBold.u-textCenter.u-noMargin
      span.u-textWhite = "valor de mercado: "
      span.u-textWhite = number_to_currency auction.market_price
    .box-price.-box-price-notify.-winner
      span.text-small.u-marginRgt5.text-black por
      span.box-price-big.-box-price-big-notify.js-priceValue = number_to_currency auction.partial_value / 100.0
    .box-action
      - if auction.prize_claim.blank?
        - if policy(PrizeClaim.new(target: auction, user: current_user)).new? || auction.winner.blank?
          = link_to 'Resgatar', auction_prize_claim_path(auction), class: 'btn -btn-block -btn-line-success -winner'
        - else
          span.btn.-btn-block.-btn-line-success.-winner disabled="true" Expirado
      - else
        .claimed
          span.btn.-btn-block.-btn-line-success.-winner disabled="true" Resgatado

/ box de finalizado
- content_for :finished_box, flush: true
  .box-notify.-box-notify-danger
    .box-info.-box-info-notify
      .box-notify-text.u-textUp.u-textBold Vendido por
    .box-price.-box-price-notify
      span.box-price-big.-box-price-big-notify.js-priceValue = number_to_currency auction.partial_value / 100.0
      .box-notify-discount
        i.fa.fa-tag.u-marginRgt5
        span.u-textBold.js-discount = "#{auction.discount_percentage}%"
        span.small  de desconto
    .box-marketValue.u-textBold.u-textCenter
      span.u-textWhite = "valor de mercado: "
      span.u-textWhite = number_to_currency auction.market_price
      .box-lastBidder
        .box-lastBidder-name.js-currentWinner = auction.decorate.last_bidder
        .box-lastBidder-label Vencedor

/ box de adiado
- content_for :fail_box, flush: true
  .box-notify.-box-notify-danger
    .box-info.-big.-box-info-notify.-spaced
      i.fa.fa-frown-o
      .box-notify-text Finalizado
    .box-price.-box-price-notify
      span.box-price-small.text-white.u-textBold Infelizmente esse jogo não teve ganhador. Poderia ter sido você, sabia?

/ box de cancelado
- content_for :canceled_box, flush: true
  .box-notify.-box-notify-danger
    .box-info.-big.-box-info-notify.-spaced
      i.fa.fa-frown-o
      .box-notify-text Cancelado
    .box-price.-box-price-notify
      span.box-price-small.text-white.u-textBold Este jogo foi cancelado pelo FazVirar.

.js-counterBox.js-box.column.-md-1-3.-sm-1-3.-xs-1-2.-xxs-fill[id="bidbox-#{auction.id}" data-timer="#{auction.countdown_timer}" data-last-bid="#{auction.bids.last.try(:created_at).try(:to_i)}" data-starts="#{auction.happens_at.to_i}" data-verify-url="#{auction_verify_status_path(auction)}" data-ends="#{auction.ended_at.to_i}" data-username="#{current_user.try(:username)}" data-subscribed="#{user_subscribed}"]
  article.box
    .box-badge[class="#{auction.tournament? ?  '-blue' : '-yellow'}"]
      span.badge-game
        i.fa.fa-badge
        |  #{auction.tournament? ? 'Torneio' : 'Super'}
      span.badge-gameType  Click
      - if auction.tournament?
        - if auction.happens_at.nil?
          span.js-Players
            = " - "
            span = auction.auction_attempts.count
            | /#{auction.players}
      .pull-right.js-creditsAttempt[style="margin-right:8px"]
        - if auction.tournament? && defined?(attempt) && attempt
          = attempt.credits
    .box-header
      = link_to auction_path(auction) do
        .box-image[style="background-image: url(#{auction.image.url})"]
          - if auction.scheduled?
            .box-image-overlay
            - if false #todo only show for sit-and-go auction where the user is not a participant
              span.box-image-textBig Participe
              span.box-image-textSmall e destrave o prêmio
    .box-body
      = link_to auction_path(auction) do
        h1.box-title.u-textCenter
          = truncate(auction.title, length: 27)
    - if auction.finished?
      - if user_signed_in? && current_user == auction.winner
        = content_for :winner_box
      - elsif auction.winner
        = content_for :finished_box
      - else
        = content_for :fail_box
    - else
      .js-hideWinnerBox.u-hide
        = content_for :winner_box
      .js-hideFinishBox.u-hide
        = content_for :finished_box
      .js-hideFailBox.u-hide
        = content_for :fail_box
      .js-hideCanceledBox.u-hide
        = content_for :canceled_box
      .box-footer.-scheduled.js-boxFooter[style="#{'padding-bottom: 22px;' if auction.tournament? && policy(auction).cancel_attempt? && attempt}"]
        .box-info.js-spinner.-big.-countdown
          i.fa.fa-refresh.spinner
        .box-info.js-countdown.-big.-countdown.u-hide[data-timezone="#{timezone}" data-started="#{auction.happens_at.present?}" data-tournament="#{auction.tournament? && auction.credits_by_attempt}" data-subscribed="#{user_subscribed}"]
        - if auction.tournament? && auction.happens_at.nil?
          .u-textBold.js-Players[style="font-size: 2rem;text-align: center;margin-bottom: -2px; padding-top:2px"]
            span = auction.auction_attempts.count
            | /#{auction.players}
            p[style="font-size: 0.85rem;margin: 0"] JOGADORES
        .box-info.js-happensText.u-hide
          - if !auction.tournament? && auction.happens_at
            span.box-info-small Começa em
            span.box-info-big
              span.u-textBold = l auction.happens_at, format: :concise
        .box-marketValue.u-textBold.u-textCenter
          span = "valor de mercado: "
          span.u-textBlack = number_to_currency auction.market_price
        .box-price
          span.text-small.u-marginRgt5 por
          span.box-price-big.js-priceValue = number_to_currency auction.partial_value / 100.0
          span.box-price-small.js-currentWinner.js-cardUsername[class="#{'-winning' if user_signed_in? && auction.decorate.last_bidder == current_user.username}"] = auction.decorate.last_bidder
        .box-action.js-bid-action[data-costing="#{auction.tournament? ? auction.join_cost_in_credits : auction.bid_cost_in_credits}" data-increase="#{number_to_currency auction.increase_value/100.to_f}" data-type="Auction" data-subscribed="#{user_subscribed}" data-tournament="#{auction.tournament? && auction.credits_by_attempt}"]
          - if auction.active? || auction.scheduled?
            - if user_signed_in?
              / USUÁRIO LOGADO:
              - if auction.tournament? && !user_subscribed
                / usuário pode se inscrever (ainda não começou)
                - if auction.players > auction.number_of_players
                  / aqui tem o botão azul de agendado
                  / o botão de participar pro usuário logado(TORNEIO), torneio e usuário não inscrito no torneio. verificar o texto também no data-default-val que tem na linha abaixo
                  button.js-btn-bid-cost.btn.-btn-line-scheduled.-btn-block.subscribe[class=" #{'-btn-inverse' if auction.active?}" data-trig="modal" data-target="#auction-modal-#{auction.id}" data-default-val="Inscreva-se"]
                    | Inscreva-se
                  = button_to auction_path(auction), method: :get, class: 'btn -btn-line-scheduled -btn-block subscribe fullRoom js-FullRoom u-hide' do
                    | O jogo já começou
                  button.js-RebuyModal.u-hide.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                    | Re-entrada
                / aqui já tá cheio
                - else
                  - if !user_subscribed && attempt
                    button.js-RebuyModal.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                      | Re-entrada
                  - else
                    = button_to auction_path(auction), method: :get, class: "btn -btn-line-scheduled -btn-block subscribe fullRoom js-FullRoom #{'js-btn-bid-cost' if attempt} #{'-btn-success' if user_signed_in? && auction.decorate.last_bidder == current_user.username}" do
                      - if attempt
                        - if auction.decorate.last_bidder == current_user.username
                          | Ganhando
                        - else
                          | Game over
                      - else
                        | O jogo já começou
                - if auction.tournament?
                  / TORNEIO: (AINDA USUÁRIO LOGADO)
                  / botão pra usuário que participou do torneio, deu F5 na página mas ainda pode comprar jogadas
                  - if auction.auction_attempts.where(user: current_user).exists? && auction.max_attempts >= auction.auction_attempts.joins(:user).group('"users"."username"').count[current_user.username]
                    = button_to auction_bids_path(auction), remote: true, class: 'js-btn-bid-cost u-hide btn -btn-line-scheduled -btn-block', data: { subscribed: user_subscribed, default_val: 'Participar' } do
                      | Participar
                  / botão que aparece pra comprar o rebuy
                  button.js-btn-bid-cost.js-RebuyModal.u-hide.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}" data-default-val="Re-entrada"]
                    | Re-entrada
                  button.u-hide.js-endRebuy.btn.-btn-line-scheduled.-btn-block.subscribe
                    | Game over
                  button.js-RebuyModal.u-hide.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                    | Re-entrada
                - else
                  / NÃO TORNEIO: ( AINDA USUÁRIO LOGADO)
                  - if user_can_rebuy && !user_have_credit
                    button.js-RebuyModal.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                      | Re-entrada
                  - else
                    / botão de se inscrever no jogo de click (leilão)
                    = button_to auction_bids_path(auction), remote: true, class: 'js-btn-bid-cost u-hide btn -btn-line-scheduled -btn-block', data: { subscribed: user_subscribed, default_val: 'Participar' } do
                      | Participar
                    button.js-RebuyModal.u-hide.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                      | Re-entrada
              - else
                - is_user = auction.decorate.last_bidder == current_user.try(:username)
                = button_to auction_bids_path(auction), remote: true, class: "js-btn-bid-cost btn #{auction.tournament? ? '-btn-line-primary' : '-btn-line-scheduled'} -btn-block #{'-btn-success' if is_user} #{'u-hide' if !is_user && policy(auction).cancel_attempt? && attempt}", data: { default_val: (auction.tournament? || auction.active? ? 'Click' : 'Agendado'), val: (is_user ? 'Ganhando' : (auction.tournament? || auction.active? ? 'Click' : 'Agendado')) } do
                  | #{is_user ? 'Ganhando' : (auction.tournament? || auction.active? ? (auction.happens_at.nil? && user_subscribed ? 'Inscrito' : 'Click') : 'Agendado')}
              - if auction.tournament?
                button.u-hide.js-endRebuy.btn.-btn-line-scheduled.-btn-block.subscribe
                  | Game over
                button.js-RebuyModal.u-hide.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                  | Re-entrada
                - if policy(auction).cancel_attempt? && attempt
                  = link_to 'Cancelar inscrição', auction_attempt_path(attempt), class: 'js-cancelAttemptBtn btn -btn-danger', method: :delete, style: 'font-size: 1rem; width: 100%; padding-top: 10px; padding-bottom: 9px;', title: 'Disponível apenas enquanto não começar o jogo'
            - else
              / NÃO LOGADO
              / botão pro usuário não logado do super click (leilão) - que é azul ou cinza, dependendo do contexto
              = button_to new_user_session_path, class: "btn #{auction.tournament? ? '-btn-line-primary' : '-btn-line-scheduled'} #{'-btn-inverse' if auction.tournament? && auction.number_of_players < auction.players} -btn-block js-btn-bid-cost", method: :get, data: { default_val: (auction.tournament? || auction.active? ? 'Participar' : 'Agendado') } do
                = auction.tournament? || auction.active? ? 'Participar' : 'Agendado'
              button.js-RebuyModal.u-hide.btn.-btn-line-primary.-btn-block.subscribe[data-trig="modal" data-target="#auction-re-modal-#{auction.id}"]
                | Re-entrada
  - if auction.prize_claim && auction.prize_claim.user == current_user && !(params[:controller] == 'games' && (params[:action] == 'auctions' || params[:action] != 'auction_tournaments'))
    .box-status
      = "STATUS: "
      span.box-status-text.u-textUp = auction.prize_claim.status_humanize


/ modal de participar de leilão click
.modal-wrapper[id="auction-modal-#{auction.id}"]
  .modal.-best-guess
    .box-badge.boxCard-badge[class="#{auction.tournament? ? '-blue' : '-yellow'}"]
      span.badge-game
        i.fa.fa-badge
        |  #{auction.tournament? ? 'torneio' : 'super'}
      span.badge-gameType  click
    .modal-header
      span.modal-close[data-close="modal"] &times;
      h3.modal-title.u-textCenter = auction.title
      table.box-marketValue[style="font-size: 100%; margin-bottom: 19px;width: 100%"]
        tbody
          - if user_signed_in?
            tr
              td
                span Seu saldo:
              td[style="text-align: right"]
                span.u-textYellow.u-textBold
                  |  V
                  i.fa.fa-bitcoin
                  span.js-user-credits = " #{current_user.credits}"
          tr
            td
              span Custo de inscrição:
            td[style="text-align: right"]
              span.text-yellow.u-textBold
                |  V
                i.fa.fa-bitcoin
                = " #{auction.join_cost_in_credits} "
          tr
            td
              span = "Valor de mercado: "
            td[style="text-align: right"]
              span.u-textYellow = number_to_currency auction.market_price
          tr
            td
              span Valor de aumento:
            td[style="text-align: right"]
              span.text-yellow
                = " #{pluralize(auction.increase_value, 'centavo')}"
          - if auction.tournament?
            tr
              td
                span Créditos de partida:
              td[style="text-align: right"]
                span.text-yellow
                  = " #{auction.credits_by_attempt}"
          - if auction.max_attempts.to_i > 0
            tr
              td
                .box-marketValue[style="font-size: 100%; margin: 0"]
                  span Número de re-entradas:
              td[style="text-align: right"]
                span.text-yellow.js-maxAttempts[data-attempts="#{auction.max_attempts}"]
                  = auction.max_attempts - auction.auction_attempts.where(user: current_user).count - 1
          tr
            td[style="font-size: 100%"]
              span Tempo de contagem:
            td[style="text-align: right"]
              span.text-yellow
                = pluralize auction.countdown_timer, 'segundo'
          - if auction.tournament?
            tr
              td
                span Número de jogadores:
              td[style="text-align: right"]
                span.text-yellow
                  = " #{auction.number_of_players}/#{auction.players}"
    .modal-body
      - if auction.tournament?
        p.u-textCenter[style="color: #888"] Este torneio começa quando #{auction.players} jogadores estiverem inscritos
      p.u-textCenter
        label
          | Clicando em CONFIRMAR você concorda com os termos acima
      .join-in.u-textCenter
        = button_to 'confirmar', auction_bids_path(auction), class: "btn #{auction.tournament? ?  '-btn-line-primary' : '-btn-line-secondary'} -btn-block -btn-lg", method: :post

/ modal de rebuy / Re-entrada
.modal-wrapper[id="auction-re-modal-#{auction.id}"]
  .modal.-best-guess
    .box-badge.boxCard-badge[class="#{auction.tournament? ? '-blue' : '-yellow'}"]
      span.badge-game
        i.fa.fa-badge
        |  #{auction.tournament? ? 'torneio' : 'super'}
      span.badge-gameType  click
    .modal-header
      span.modal-close[data-close="modal"] &times;
      h3.modal-title.u-textCenter = auction.title
      table.box-marketValue[style="font-size: 100%; margin-bottom: 19px;width: 100%"]
        tbody
          - if user_signed_in?
            tr
              td
                span Seu saldo:
              td[style="text-align: right"]
                span.u-textYellow.u-textBold
                  |  V
                  i.fa.fa-bitcoin
                  span.js-user-credits = " #{current_user.credits}"
          tr
            td
              span Custo de re-entrada:
            td[style="text-align: right"]
              span.text-yellow.u-textBold
                |  V
                i.fa.fa-bitcoin
                = " #{auction.join_cost_in_credits} "
          - if auction.max_attempts.to_i > 0
            tr
              td
                .box-marketValue[style="font-size: 100%"]
                  span Quantidade de re-entradas disponíveis:
              td[style="text-align: right"]
                span.text-yellow.js-maxAttempts[data-attempts="#{auction.max_attempts}"]
                  - maxText = auction.max_attempts - auction.auction_attempts.where(user: current_user).count - 1
                  = maxText == 0 ? 'Este é sua última re-entrada' : maxText
    .modal-body
      p.u-textCenter
        label
          | Clicando em CONFIRMAR você concorda com o termos acima
      .join-in.u-textCenter
        = button_to 'Confirmar', auction_bids_path(auction), class: "btn #{auction.tournament? ? '-btn-line-primary' : '-btn-line-secondary'} -btn-block -btn-lg", method: :post
